
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    categories: [Category!]! @all
    category(id: ID!): Category @find
    brands: [Brand!]! @all
    brand(id: ID!): Brand @find
    products: [Product!]! @all
    product: Product @find
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}
type Category {
  id: ID!
  name: String!
  slug: String!
  products: [Product!]! @hasmany
  created_at: DateTime!
  updated_at: DateTime!
}
type Brand {
  id: ID!
  name: String!
  slug: String!
  products: [Product!]! @hasmany
}
type Product {
  id: ID!
  name: String!
  slug: String!
  price: Float
  qty: Int
  category: Category! @belongsTo
  brand: Brand! @belongsTo
  created_at: DateTime!
  updated_at: DateTime
}


# All Imput

input CreateCategoryInput {
  name: String! @validate(rules: ["required", "string", "max:255"])
  slug: String! @validate(rules: ["required", "string", "max:255"])
}
input UpdateCategoryInput {
  id: ID! @validate(rules: ["required", "string", "max:255"])
  name: String! @validate(rules: ["required", "string", "max:255"])
  slug: String! @validate(rules: ["required", "string", "max:255"])
}

input CreateBrandInput {
  name: String! @validate(rules: ["required", "string", "max:255"])
  slug: String! @validate(rules: ["required", "string", "max:255"])
}
input UpdateBrandInput{
  id: ID! @validate(rules: ["required", "string", "max:255"])
  name:String! @validate(rules: ["required", "string", "max:255"])
  slug: String! @validate(rules: ["required", "string", "max:255"])
}
input CreateProductInput {
  name: String! @validate(rules: ["required", "string", "max:255"])
  slug: String! @validate(rules: ["required", "string", "max:255"])
  price: Float @validate(rules: ["required", "float",])
  qty: Int     @validate(rules: ["required", "integer",])
  category_id: ID
  brand_id: ID
}
input UpdateProductInput {
  id: ID! @rules(apply: ["required", "exists:products,id"])
  name: String! @validate(rules: ["required", "string", "max:255"])
  slug: String! @validate(rules: ["required", "string", "max:255"])
  price: Float @validate(rules: ["required", "float",])
  qty: Int     @validate(rules: ["required", "integer",])
  category_id: ID
  brand_id: ID
}

type Mutation {
  createCategory(input: CreateCategoryInput @spread): Category @field(resolver: "App\\GraphQL\\Mutations\\CategoryMutations@createCategory")
  updateCategory(input: UpdateCategoryInput @spread): Category @field(resolver: "App\\GraphQL\\Mutations\\CategoryMutations@updateCategory")
  deleteCategory(id: ID! @whereKey): Boolean @field(resolver: "App\\GraphQL\\Mutations\\CategoryMutations@deleteCategory")


  createBrand(input: CreateBrandInput @spread): Brand @field(resolver: "App\\GraphQL\\Mutations\\BrandMutations@createBrand")
  updateBrand(input: UpdateBrandInput @spread): Brand @field(resolver: "App\\GraphQL\\Mutations\\BrandMutations@updateBrand")
  deleteBrand(id: ID! @whereKey): Boolean @field(resolver: "App\\GraphQL\\Mutations\\BrandMutations@deleteBrand")

 

  createProduct(input: CreateProductInput @spread): Product @field(resolver: "App\\GraphQL\\Mutations\\ProductMutations@createProduct")
  updateProduct(input: UpdateProductInput @spread): Product @field(resolver: "App\\GraphQL\\Mutations\\ProductMutations@updateProduct")
  deleteProduct(id: ID! @whereKey): Boolean @field(resolver: "App\\GraphQL\\Mutations\\ProductMutations@deleteProduct")
  
}